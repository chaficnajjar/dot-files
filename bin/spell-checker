#!/usr/bin/perl
# Author: Chafic Najjar

# module used to get the similarity between two words
# it's really fast :)
use Text::LevenshteinXS 'distance';

# open dictionary file and display error message if it doesn't exist
open(file, "/usr/share/dict/words") || die "Error message: $!";

# store each file line (one word) as a hash key AND its value
while(<file>) {
    chomp $_; # remove newline
    $dictionary_words{$_} = $_;
}

# we're done with the file, let's close it
close file;

# get sentence from user
print "Enter your sentence: ";
$sentence = <STDIN>;
chomp $sentence;

# split the sentence into words and store words in "words" array
@words = split(" ", $sentence);

# chop period from last word only if period is found
$last_word = $words[@words-1];
if (chop $last_word eq ".") {
    chop $words[@words-1]; 
}

# lookup the entered words (@words) in the dictionary of words (%dictionary_words)
# and store them in array "@not_found"
foreach(@words) {
    if (! lc($_) eq $dictionary_words{lc($_)}) {
        push @not_found, lc($_);
    }
}

if (! @not_found == 0) {
    print "The misspelled words are:\n\n";
}

else {
    print "Correct sentence\n";
}

# print misspelled words and similar words
foreach(@not_found) {
    $word = $_;
    print "$word: ";

    # similar words have only one edit (insertion, deletion, update)
    foreach(keys %dictionary_words) {
        if (distance($word, $_) == 1) {
            print "$_ ";
        }
    }

    print "\n";
}
